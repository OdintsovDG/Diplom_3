{"name": "Проверяем переход по клику на кнопку \"Лента заказов\"", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 299.096\n  (Session info: chrome=129.0.6668.59)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7861FFDA5+29557]\n\t(No symbol) [0x00007FF786172240]\n\t(No symbol) [0x00007FF78602B6EA]\n\t(No symbol) [0x00007FF7860141C7]\n\t(No symbol) [0x00007FF786013ECA]\n\t(No symbol) [0x00007FF786011D52]\n\t(No symbol) [0x00007FF7860125AF]\n\t(No symbol) [0x00007FF7860210CE]\n\t(No symbol) [0x00007FF786039B9D]\n\t(No symbol) [0x00007FF78603F72A]\n\t(No symbol) [0x00007FF786012D14]\n\t(No symbol) [0x00007FF7860399F9]\n\t(No symbol) [0x00007FF7860C8BEC]\n\t(No symbol) [0x00007FF7860A72A3]\n\t(No symbol) [0x00007FF7860712DF]\n\t(No symbol) [0x00007FF786072451]\n\tGetHandleVerifier [0x00007FF78652DCBD+3363469]\n\tGetHandleVerifier [0x00007FF786579B47+3674391]\n\tGetHandleVerifier [0x00007FF78656EAEB+3629243]\n\tGetHandleVerifier [0x00007FF7862BFC66+815670]\n\t(No symbol) [0x00007FF78617D6EF]\n\t(No symbol) [0x00007FF7861792B4]\n\t(No symbol) [0x00007FF786179450]\n\t(No symbol) [0x00007FF7861681FF]\n\tBaseThreadInitThunk [0x00007FFF44FE7344+20]\n\tRtlUserThreadStart [0x00007FFF46FC26B1+33]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"f26bef99159d50c89b45023aa6930ff9\")>\n\n    @pytest.fixture\n    def switch_page(driver):\n        page = SwitchPage(driver)\n>       page.get_url(Url.MAIN_PAGE_URL)\n\nconftest.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\base_page.py:16: in get_url\n    self.driver.get(url)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:363: in get\n    self.execute(Command.GET, {\"url\": url})\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000017B7BACD760>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: 2...07FF7861681FF]\\\\n\\\\tBaseThreadInitThunk [0x00007FFF44FE7344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFF46FC26B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 299.096\nE         (Session info: chrome=129.0.6668.59)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7861FFDA5+29557]\nE       \t(No symbol) [0x00007FF786172240]\nE       \t(No symbol) [0x00007FF78602B6EA]\nE       \t(No symbol) [0x00007FF7860141C7]\nE       \t(No symbol) [0x00007FF786013ECA]\nE       \t(No symbol) [0x00007FF786011D52]\nE       \t(No symbol) [0x00007FF7860125AF]\nE       \t(No symbol) [0x00007FF7860210CE]\nE       \t(No symbol) [0x00007FF786039B9D]\nE       \t(No symbol) [0x00007FF78603F72A]\nE       \t(No symbol) [0x00007FF786012D14]\nE       \t(No symbol) [0x00007FF7860399F9]\nE       \t(No symbol) [0x00007FF7860C8BEC]\nE       \t(No symbol) [0x00007FF7860A72A3]\nE       \t(No symbol) [0x00007FF7860712DF]\nE       \t(No symbol) [0x00007FF786072451]\nE       \tGetHandleVerifier [0x00007FF78652DCBD+3363469]\nE       \tGetHandleVerifier [0x00007FF786579B47+3674391]\nE       \tGetHandleVerifier [0x00007FF78656EAEB+3629243]\nE       \tGetHandleVerifier [0x00007FF7862BFC66+815670]\nE       \t(No symbol) [0x00007FF78617D6EF]\nE       \t(No symbol) [0x00007FF7861792B4]\nE       \t(No symbol) [0x00007FF786179450]\nE       \t(No symbol) [0x00007FF7861681FF]\nE       \tBaseThreadInitThunk [0x00007FFF44FE7344+20]\nE       \tRtlUserThreadStart [0x00007FFF46FC26B1+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: TimeoutException"}, "start": 1726931391728, "stop": 1726931391728, "uuid": "0aa5ea19-24fd-4f65-9429-9848f077d43e", "historyId": "fb07cda67938dbc96a8c1acd95ed4061", "testCaseId": "fb07cda67938dbc96a8c1acd95ed4061", "fullName": "tests.test_switch_page.TestSwitchPage#test_switch_orders_list", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_switch_page"}, {"name": "subSuite", "value": "TestSwitchPage"}, {"name": "host", "value": "WIN-O4R89KV0872"}, {"name": "thread", "value": "6252-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_switch_page"}]}